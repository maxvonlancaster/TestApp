1. Requirement definition 
	Requirement is a singular documented physical or functional need that a particular design, product or process aims to satisfy. It is commonly used in a formal sense in engineering design, 
	including for example in systems engineering, software engineering, or enterprise engineering. It is a broad concept that could speak to any necessary (or sometimes desired) function, attribute, 
	capability, characteristic, or quality of a system for it to have value and utility to a customer, organization, internal user, or other stakeholder. Requirements can come with different levels 
	of specificity; for example, a requirement specification or requirement "spec" (often imprecisely referred to as "the" spec/specs, but there are actually different sorts of specifications) refers 
	to an explicit, highly objective/clear (and often quantitative) requirement (or sometimes, set of requirements) to be satisfied by a material, design, product, or service.

2. Levels of Requirements: Business, User, and Functional requirements 
	Business level: defines the business problems or opportunities about the product. Business requirements define why the software product is being developed. They are the objectives of the 
	customer requesting the development of the software.
	User level: defines functionality of the software product from the user’s perspective. They define what the software has to do in order for the users to accomplish their objectives.
	Functional level: define the software functionality must be built into the product to enable users to accomplish their tasks. This includes the entire external, database, functional/non-
	functional requirements.

3. Most common requirements risks 
	Lack of involvement of the technical department; Scope creep; Poor impact analysis;
	Requirements risks are occurrences or conditions that can affect the successful development of an end product if not properly managed. As part of elicitation efforts, BAs typically identify 
	risks by asking “What-if” questions. When elicitation efforts focus on identifying exceptions and failure points, it’s a form of risk management. The idea is to find potential solutions to 
	these questions and include them as part of requirements to reduce the probability of missing out on critical requirements.

4. Characteristics of Excellent Requirements 
	Good requirements should have the following characteristics:
	Unambiguous; Testable (verifiable); Clear (concise, terse, simple, precise); Correct; Understandable; Feasible (realistic, possible); Independent; Atomic; Necessary; Implementation-free (abstract)
	Besides these criteria for individual requirements, three criteria apply to the set of requirements. The set should be Consistent; Nonredundant; Complete

5. Benefits from a High-Quality Requirements Process 
	The return on investment for good requirements gathering is virtually always higher than the cost.  In almost all cases if you spend the time develop the requirements you can develop a far superior 
	product with much less hassle and frustration.  At the same time not doing the right amount of requirements gathering can create a chaotic environment in which stakeholders are upset with the managers, 
	managers are upset with the developers, developers are upset with managers and in the end what really suffers is the product.  Some of the benefits from good requirements gathering can be:
	Fewer defects in the delivered product
	Less development rework
	Faster delivery of the finished product
	Less unused features
	Lower cost of development
	Less miss-communicated requirements
	Reduced project chaos
	Higher levels of satisfaction from stakeholders
	Higher levels of satisfaction from developers
	Higher levels of satisfaction from consumers and users
	Products that work well and have a useful feature set
	

6. Root Causes of Project Success and Failure
	Here are just some of the most common causes of project failure:
	Poorly defined project scope; Inadequate risk management; Failure to identify key assumptions; Project managers who lack experience and training; No use of formal methods and strategies; Lack of effective 
	communication at all levels; Key staff leaving the project and/or company; Poor management of expectations; Ineffective leadership; Lack of detailed documentation; Failure to track requirements; 
	Failure to track progress; Lack of detail in the project plans; Inaccurate time and effort estimates; Cultural differences in global projects;
	The top 5 factors found in successful projects are: 1.   User Involvement 2.   Executive Management Support 3.   Clear Statement of Requirements 4.   Proper Planning 5.   Realistic Expectations
	The top 5 indicators found in “Challenged” projects are: 1.   Lack of User Input 2.   Incomplete Requirements & Specifications 3.   Changing Requirements & Specifications 4.   Lack of Executive Support 5.   Technical
	Incompetence
	

