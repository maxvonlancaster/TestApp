Tables, relationships, keys, constraints understanding
	A table is a collection of related data held in a table format within a database. It consists of columns, and rows.
	Relation, is a set of tuples (d1, d2, ..., dn), where each element dj is a member of Dj, a data domain.
	A DBMS key is an attribute or set of an attribute which helps you to identify a row(tuple) in a relation(table). They allow you to find the 
	relation between two tables. Keys help you uniquely identify a row in a table by a combination of one or more columns in that table.
	Super Key a group of single or multiple keys which identifies rows in a table. A Super key may have additional attributes that are not needed 
	for unique identification.
	Primary Key a column or group of columns in a table that uniquely identify every row in that table. The Primary Key can't be a duplicate meaning 
	the same value can't appear more than once in the table. A table cannot have more than one primary key. Primary key field cannot be null; 
	value in a primary key column can never be modified or updated if any foreign key refers to that primary key; two rows can't have the same 
	primary key value. 
	Candidate Key set of attributes that uniquely identify tuples in a table. Candidate Key is a super key with no repeated attributes. The Primary 
	key should be selected from the candidate keys. Every table must have at least a single candidate key. A table can have multiple candidate keys 
	but only a single primary key.
	Alternate Key a column or group of columns in a table that uniquely identify every row in that table. A table can have multiple choices for a 
	primary key but only one can be set as the primary key. All the keys which are not primary key are called an Alternate Key.
	Foreign Key column that creates a relationship between two tables. The purpose of Foreign keys is to maintain data integrity and allow navigation 
	between two different instances of an entity. It acts as a cross-reference between two tables as it references the primary key of another table.
	Compound Key has two or more attributes that allow you to uniquely recognize a specific record. It is possible that each column may not be unique 
	by itself within the database.
	Composite Key combination of two or more columns that uniquely identify rows in a table. The combination of columns guarantees uniqueness, though 
	individually uniqueness is not guaranteed. Hence, they are combined to uniquely identify records in a table.
	Surrogate Key An artificial key which aims to uniquely identify each record is called a surrogate key. These kind of key are unique because they 
	are created when you don't have any natural primary key.
	SQL constraints are used to specify rules for data in a table.
	CREATE TABLE table_name (
		column1 datatype constraint,
		column2 datatype constraint,
		....
	);
	NOT NULL - Ensures that a column cannot have a NULL value
	UNIQUE - Ensures that all values in a column are different
	PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
	FOREIGN KEY - Uniquely identifies a row/record in another table
	CHECK - Ensures that all values in a column satisfies a specific condition // CHECK (Age>=18)
	DEFAULT - Sets a default value for a column when no value is specified // DEFAULT "Jon doe"
	INDEX - Used to create and retrieve data from the database very quickly // 

DDL, DML, DCL understanding
	DDL: A data definition or data description language (DDL) is a syntax similar to a computer programming language for defining data structures, 
	especially database schemas. DDL statements create and modify database objects such as tables, indexes, and users. Common DDL statements are 
	CREATE, ALTER, and DROP.
	DML: A data manipulation language (DML) is a computer programming language used for adding (inserting), deleting, and modifying (updating) data 
	in a database. A DML is often a sublanguage of a broader database language such as SQL, with the DML comprising some of the operators in the 
	language. Read-only selecting of data is sometimes distinguished as being part of a separate data query language (DQL), but it is closely 
	related and sometimes also considered a component of a DML; some operators may perform both selecting (reading) and writing.
	DCL: A data control language (DCL) is a syntax similar to a computer programming language used to control access to data stored in a database 
	(Authorization). In particular, it is a component of Structured Query Language (SQL).
	Examples of DCL commands include:
	GRANT to allow specified users to perform specified tasks.
	REVOKE it is remove the user accessibility to database object.

SQL data types 
	CHARACTER(n)	Character string. Fixed-length n
	VARCHAR(n) or
	CHARACTER VARYING(n)	Character string. Variable length. Maximum length n
	BINARY(n)	Binary string. Fixed-length n
	BOOLEAN	Stores TRUE or FALSE values
	VARBINARY(n) or
	BINARY VARYING(n)	Binary string. Variable length. Maximum length n
	INTEGER(p)	Integer numerical (no decimal). Precision p
	SMALLINT	Integer numerical (no decimal). Precision 5
	INTEGER	Integer numerical (no decimal). Precision 10
	BIGINT	Integer numerical (no decimal). Precision 19
	DECIMAL(p,s)	Exact numerical, precision p, scale s. Example: decimal(5,2) is a number that has 3 digits before the decimal and 2 digits 
	after the decimal
	NUMERIC(p,s)	Exact numerical, precision p, scale s. (Same as DECIMAL)
	FLOAT(p)	Approximate numerical, mantissa precision p. A floating number in base 10 exponential notation. The size argument for this type 
	consists of a single number specifying the minimum precision
	REAL	Approximate numerical, mantissa precision 7
	FLOAT	Approximate numerical, mantissa precision 16
	DOUBLE PRECISION	Approximate numerical, mantissa precision 16
	DATE	Stores year, month, and day values
	TIME	Stores hour, minute, and second values
	TIMESTAMP	Stores year, month, day, hour, minute, and second values
	INTERVAL	Composed of a number of integer fields, representing a period of time, depending on the type of interval
	ARRAY	A set-length and ordered collection of elements
	MULTISET	A variable-length and unordered collection of elements
	XML	Stores XML data

SQL operators, functions
	Operators: Arithmetic(+,..., %-modulo); Bitwise($ | ^); Comparison(<> - not equal); Compound(+=,...), Logical:
	ALL	- TRUE if all of the subquery values meet the condition	
	AND	- TRUE if all the conditions separated by AND is TRUE	
	ANY	- TRUE if any of the subquery values meet the condition	
	BETWEEN	- TRUE if the operand is within the range of comparisons	
	EXISTS - TRUE if the subquery returns one or more records	
	IN - TRUE if the operand is equal to one of a list of expressions	
	LIKE - TRUE if the operand matches a pattern	
	NOT	- Displays a record if the condition(s) is NOT TRUE	
	OR - TRUE if any of the conditions separated by OR is TRUE	
	SOME - TRUE if any of the subquery values meet the condition
	
	Functions: SQL Server has many built-in functions.
	AVG() - Returns the average value
	COUNT() - Returns the number of rows
	FIRST() - Returns the first value
	LAST() - Returns the last value
	MAX() - Returns the largest value
	MIN() - Returns the smallest value
	SUM() - Returns the sum
	UCASE() - Converts a field to upper case
	LCASE() - Converts a field to lower case
	MID() - Extract characters from a text field
	LEN() - Returns the length of a text field
	ROUND() - Rounds a numeric field to the number of decimals specified
	NOW() - Returns the current system date and time
	FORMAT() - Formats how a field is to be displayed

Data manipulation (insert, update, delete)
	

Retrieving data (simple select statement)
	

Joins understanding
	An SQL JOIN clause is used to combine rows from two or more tables, based on a common field between them. The most common type of join is: SQL 
	INNER JOIN (simple join). An SQL INNER JOIN returns all rows from multiple tables where the join condition is met.
	INNER JOIN: Returns all rows when there is at least one match in BOTH tables
	LEFT JOIN: Return all rows from the left table, and the matched rows from the right table
	RIGHT JOIN: Return all rows from the right table, and the matched rows from the left table
	FULL JOIN: Return all rows when there is a match in ONE of the tables
