1. Abstraction
	Abstraction is one of the key concepts of object-oriented programming (OOP) languages. Its main goal is to handle complexity by hiding 
	unnecessary details from the user. That enables the user to implement more complex logic on top of the provided abstraction without 
	understanding or even thinking about all the hidden complexity.
	Objects in an OOP language provide an abstraction that hides the internal implementation details. Similar to the coffee machine in your 
	kitchen, you just need to know which methods of the object are available to call and which input parameters are needed to trigger a 
	specific operation. But you don’t need to understand how this method is implemented and which kinds of actions it has to perform to 
	create the expected result.
	In object-oriented programming theory, abstraction involves the facility to define objects that represent abstract "actors" that can 
	perform work, report on and change their state, and "communicate" with other objects in the system. 

2. Encapsulation
	Bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. 
	Encapsulation is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct 
	access to them. Publicly accessible methods are generally provided in the class (so-called "getters" and "setters") to access the values, 
	and other client classes call these methods to retrieve and modify the values within the object.
	A language mechanism for restricting direct access to some of the object's components.
	Encapsulation is implemented by using access specifiers. An access specifier defines the scope and visibility of a class member. C# 
	supports the following access specifiers − Public Private Protected Internal Protected internal
	Abstraction and encapsulation are related features in object oriented programming. Abstraction allows making relevant information visible 
	and encapsulation enables a programmer to implement the desired level of abstraction.
	Encapsulation can be achieved by: Declaring all the variables in the class as private and using C# Properties in the class to set and get 
	the values of variables.

3. Inheritance vs. Aggregation
	If The new class is more or less as the original class. Use inheritance. The new class is now a subclass of the original class.
	If the new class must have the original class. Use aggregation. The new class has now the original class as a member.
	If we have used inheritance (or we plan to use it) but we only use part of the interface, or we are forced to override a lot of functionality 
	to keep the correlation logical. Then we have a big nasty smell that indicates that we had to use aggregation.
	If we have used aggregation (or we plan to use it) but we find out we need to copy almost all of the functionality. Then we have a smell that 
	points in the direction of inheritance.

4. Modularity
	Broadly speaking, modularity is the degree to which a system's components may be separated and recombined, often with the benefit of flexibility 
	and variety in use. The concept of modularity is used primarily to reduce complexity by breaking a system into varying degrees of interdependence 
	and independence across and "hide the complexity of each part behind an abstraction and interface." However, the concept of modularity can be 
	extended to multiple disciplines, each with their own nuances.  logical partitioning of the "software design" that allows complex software to 
	be manageable for the purpose of implementation and maintenance. The logic of partitioning may be based on related functions, implementation 
	considerations, data links, or other criteria.
	Modularity refers to the concept of making multiple modules first and then linking and combining them to form a complete system. Modularity 
	enables re-usability and minimizes duplication. In addition to re-usability, modularity also makes it easier to fix problems as bugs can be 
	traced to specific system modules, thus limiting the scope of detailed error searching. Modular programming is an extensively used concept 
	based on modularity. Modularity is also a feature of object oriented programming.
	Allows multiple implementations: The client can select an appropriate implementation module without modification of its code.
	Ensures that required functions are effectively provided
	Allows several developers to work on different modules concurrently
	Allows to test modules independently
	Large projects become easier to monitor and to control

5. Polymorphism
	Provision of a single interface to entities of different types or the use of a single symbol to represent multiple different types. 
	Polymorphism can be distinguished by when the implementation is selected: statically (at compile time) or dynamically (at run time, typically 
	via a virtual function). This is known respectively as static dispatch and dynamic dispatch.
	At run time, objects of a derived class may be treated as objects of a base class in places such as method parameters and collections or arrays. 
	When this occurs, the object's declared type is no longer identical to its run-time type.
	Base classes may define and implement virtual methods, and derived classes can override them, which means they provide their own definition and 
	implementation. At run-time, when client code calls the method, the CLR looks up the run-time type of the object, and invokes that override of 
	the virtual method. Thus in your source code you can call a method on a base class, and cause a derived class's version of the method to be 
	executed.
	Virtual methods enable you to work with groups of related objects in a uniform way. For example, suppose you have a drawing application that 
	enables a user to create various kinds of shapes on a drawing surface. You do not know at compile time which specific types of shapes the 
	user will create. However, the application has to keep track of all the various types of shapes that are created, and it has to update them in 
	response to user mouse actions. You can use polymorphism to solve this problem in two basic steps: 
	Create a class hierarchy in which each specific shape class derives from a common base class.
	Use a virtual method to invoke the appropriate method on any derived class through a single call to the base class method.

6. Types vs. Classes
	An object's class defines how the object is implemented .The class defines object's internal state and the implementation of its operations.
	In contrast, an object's type only refers to its interface - a set of requests to which it can respond.
	An object can have many types, and objects of different classes can have the same type.
	A type summarizes the common features of a set of objects with the same characteristics. We may say that a type is an abstract interface that 
	specifies how an object can be used.
	A class represents an implementation of the type. It is a concrete data structure and collection of methods.

7. Abstraction Qualities (cohesion, coupling, etc)
	Cohesion refers to what the class (or module) can do. Low cohesion would mean that the class does a great variety of actions - it is broad, 
	unfocused on what it should do. High cohesion means that the class is focused on what it should be doing, i.e. only methods relating to the 
	intention of the class.
	As for coupling, it refers to how related or dependent two classes/modules are toward each other. For low coupled classes, changing something 
	major in one class should not affect the other. High coupling would make it difficult to change and maintain your code; since classes are closely 
	knit together, making a change could require an entire system revamp. Good software design has high cohesion and low coupling.

8. Separation of concerns principle
	A design principle for separating a computer program into distinct sections such that each section addresses a separate concern. A concern 
	is a set of information that affects the code of a computer program. A concern can be as general as "the details of the hardware for an 
	application", or as specific as "the name of which class to instantiate". A program that embodies SoC well is called a modular program. 
	Modularity, and hence separation of concerns, is achieved by encapsulating information inside a section of code that has a well-defined 
	interface. Encapsulation is a means of information hiding. Layered designs in information systems are another embodiment of separation of 
	concerns (e.g., presentation layer, business logic layer, data access layer, persistence layer).
	Separation of concerns results in more degrees of freedom for some aspect of the program's design, deployment, or usage. Common among these 
	is increased freedom for simplification and maintenance of code. When concerns are well-separated, there are more opportunities for module 
	upgrade, reuse, and independent development. Hiding the implementation details of modules behind an interface enables improving or modifying 
	a single concern's section of code without having to know the details of other sections and without having to make corresponding changes to 
	those other sections. Modules can also expose different versions of an interface, which increases the freedom to upgrade a complex system in 
	piecemeal fashion without interim loss of functionality.
	Separation of concerns is a form of abstraction. As with most abstractions, separating concerns means adding additional code interfaces, 
	generally creating more code to be executed. So despite the many benefits of well-separated concerns, there is often an associated execution 
	penalty.


// Composition:
  // |Car| is the owner of |carburetor_|.  |carburetor_| is created when |Car|
  // is created, it is destroyed when |Car| is destroyed.
// Aggregation:
  // |Pond| is not the owner of |ducks_|, it references |ducks_| managed by
  // something else.